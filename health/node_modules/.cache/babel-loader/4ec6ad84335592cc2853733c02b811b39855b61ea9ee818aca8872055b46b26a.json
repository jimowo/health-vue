{"ast":null,"code":"import store from \"@/store\";\nimport Vue from \"vue\";\n\n/**\r\n * 自定义指令\r\n * 第一个参数是指令\r\n * 第二个参数是实现方法\r\n */\nVue.directive(\"hasRole\", {\n  inserted(el, binding) {\n    // 获取指令传递过来的数据\n    const {\n      value\n    } = binding;\n    // 获取vuex 中的角色信息\n    const roles = store.state.roles;\n    // 定义超级管理员可以查看所有\n    const admin = \"SUPER_ADMIN\";\n    // 判断指令是否传值 传递的值是否是一个数组 数组是否大于0\n    if (value && value instanceof Array && value.length > 0) {\n      /**\r\n       * some() 用于检测数组中的元素是否满足指定的条件 并不会改变原来的数组\r\n       */\n      const hasRole = roles.some(item => {\n        return item.code === admin || value.includes(item.code);\n      });\n      if (!hasRole) {\n        // 把对应的元素删除\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      throw new Error(`请设置${value}角色标签`);\n    }\n  }\n});\n\n/**\r\n * 自定义权限指令\r\n */\nVue.directive(\"hasPermission\", {\n  inserted(el, binding) {\n    const value = binding;\n    // 获取权限数据\n    const permissions = store.state.permissions;\n    // 再获取用户角色\n    const roles = store.state.roles;\n    // 定义超级管理员可以查看所有\n    const admin = \"SUPER_ADMIN\";\n    // 判断值是否存在\n    if (value && value instanceof Array && value.length > 0) {\n      // 是否为管理员\n      const hasRole = roles.some(item => {\n        return item.code === admin;\n      });\n      // 如果不是管理员是否拥有对应权限\n      const hasPermission = permissions.some(item => {\n        return value.includes(item.code);\n      });\n      if (!hasPermission && !hasRole) {\n        // 把对应的元素删除\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      throw new Error(`请设置${value}权限标签`);\n    }\n  }\n});","map":{"version":3,"names":["store","Vue","directive","inserted","el","binding","value","roles","state","admin","Array","length","hasRole","some","item","code","includes","parentNode","removeChild","Error","permissions","hasPermission"],"sources":["C:/Users/12524/Documents/health-vue/health/src/utils/permission.js"],"sourcesContent":["import store from \"@/store\";\r\nimport Vue from \"vue\";\r\n\r\n/**\r\n * 自定义指令\r\n * 第一个参数是指令\r\n * 第二个参数是实现方法\r\n */\r\nVue.directive(\"hasRole\", {\r\n  inserted(el, binding) {\r\n    // 获取指令传递过来的数据\r\n    const {value} = binding;\r\n    // 获取vuex 中的角色信息\r\n    const roles = store.state.roles;\r\n    // 定义超级管理员可以查看所有\r\n    const admin = \"SUPER_ADMIN\";\r\n    // 判断指令是否传值 传递的值是否是一个数组 数组是否大于0\r\n    if (value && value instanceof Array && value.length > 0) {\r\n      /**\r\n       * some() 用于检测数组中的元素是否满足指定的条件 并不会改变原来的数组\r\n       */\r\n      const hasRole = roles.some(item => {\r\n        return item.code === admin || value.includes(item.code);\r\n      });\r\n      if (!hasRole) {\r\n        // 把对应的元素删除\r\n        el.parentNode.removeChild(el);\r\n      }\r\n    } else {\r\n      throw new Error(`请设置${value}角色标签`);\r\n    }\r\n  }\r\n})\r\n\r\n/**\r\n * 自定义权限指令\r\n */\r\nVue.directive(\"hasPermission\", {\r\n  inserted(el, binding) {\r\n    const value = binding;\r\n    // 获取权限数据\r\n    const permissions = store.state.permissions;\r\n    // 再获取用户角色\r\n    const roles = store.state.roles;\r\n    // 定义超级管理员可以查看所有\r\n    const admin = \"SUPER_ADMIN\";\r\n    // 判断值是否存在\r\n    if (value && value instanceof Array && value.length > 0) {\r\n      // 是否为管理员\r\n      const hasRole = roles.some(item => {\r\n        return item.code === admin;\r\n      })\r\n      // 如果不是管理员是否拥有对应权限\r\n      const hasPermission = permissions.some(item => {\r\n        return value.includes(item.code);\r\n      });\r\n\r\n      if (!hasPermission && !hasRole) {\r\n        // 把对应的元素删除\r\n        el.parentNode.removeChild(el);\r\n      }\r\n    } else {\r\n      throw new Error(`请设置${value}权限标签`);\r\n    }\r\n  }\r\n})\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,GAAG,MAAM,KAAK;;AAErB;AACA;AACA;AACA;AACA;AACAA,GAAG,CAACC,SAAS,CAAC,SAAS,EAAE;EACvBC,QAAQ,CAACC,EAAE,EAAEC,OAAO,EAAE;IACpB;IACA,MAAM;MAACC;IAAK,CAAC,GAAGD,OAAO;IACvB;IACA,MAAME,KAAK,GAAGP,KAAK,CAACQ,KAAK,CAACD,KAAK;IAC/B;IACA,MAAME,KAAK,GAAG,aAAa;IAC3B;IACA,IAAIH,KAAK,IAAIA,KAAK,YAAYI,KAAK,IAAIJ,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;MACvD;AACN;AACA;MACM,MAAMC,OAAO,GAAGL,KAAK,CAACM,IAAI,CAACC,IAAI,IAAI;QACjC,OAAOA,IAAI,CAACC,IAAI,KAAKN,KAAK,IAAIH,KAAK,CAACU,QAAQ,CAACF,IAAI,CAACC,IAAI,CAAC;MACzD,CAAC,CAAC;MACF,IAAI,CAACH,OAAO,EAAE;QACZ;QACAR,EAAE,CAACa,UAAU,CAACC,WAAW,CAACd,EAAE,CAAC;MAC/B;IACF,CAAC,MAAM;MACL,MAAM,IAAIe,KAAK,CAAE,MAAKb,KAAM,MAAK,CAAC;IACpC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACAL,GAAG,CAACC,SAAS,CAAC,eAAe,EAAE;EAC7BC,QAAQ,CAACC,EAAE,EAAEC,OAAO,EAAE;IACpB,MAAMC,KAAK,GAAGD,OAAO;IACrB;IACA,MAAMe,WAAW,GAAGpB,KAAK,CAACQ,KAAK,CAACY,WAAW;IAC3C;IACA,MAAMb,KAAK,GAAGP,KAAK,CAACQ,KAAK,CAACD,KAAK;IAC/B;IACA,MAAME,KAAK,GAAG,aAAa;IAC3B;IACA,IAAIH,KAAK,IAAIA,KAAK,YAAYI,KAAK,IAAIJ,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;MACvD;MACA,MAAMC,OAAO,GAAGL,KAAK,CAACM,IAAI,CAACC,IAAI,IAAI;QACjC,OAAOA,IAAI,CAACC,IAAI,KAAKN,KAAK;MAC5B,CAAC,CAAC;MACF;MACA,MAAMY,aAAa,GAAGD,WAAW,CAACP,IAAI,CAACC,IAAI,IAAI;QAC7C,OAAOR,KAAK,CAACU,QAAQ,CAACF,IAAI,CAACC,IAAI,CAAC;MAClC,CAAC,CAAC;MAEF,IAAI,CAACM,aAAa,IAAI,CAACT,OAAO,EAAE;QAC9B;QACAR,EAAE,CAACa,UAAU,CAACC,WAAW,CAACd,EAAE,CAAC;MAC/B;IACF,CAAC,MAAM;MACL,MAAM,IAAIe,KAAK,CAAE,MAAKb,KAAM,MAAK,CAAC;IACpC;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}